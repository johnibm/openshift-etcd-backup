# Create Backup Server Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: openshift-etcd-backup-server-deployment
  namespace: ocp-etcd-backup
  labels:
    app: openshift-etcd-backup-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: openshift-etcd-backup-server
  template:
    metadata:
      labels:
        app: openshift-etcd-backup-server
    spec: 
      containers:
      - name: server
        image: "registry.redhat.io/openshift4/ose-cli"
        imagePullPolicy: Always
        command: ['/bin/bash', '-c', 'while true; do node=$(oc get node -l node-role.kubernetes.io/master= --no-headers -ojsonpath="{.items[0].metadata.name}") && server_pod=$(oc get pods -l app=openshift-etcd-backup-server -ojsonpath="{.items[0].metadata.name}"); oc debug node/$node -T -- chroot /host sh -c "oc cp /home/core/backup $server_pod:/openshift_etcd_backup/"; sleep 300; done;']
        volumeMounts:                     
          - name: openshift-etcd-backup-vol
            mountPath: /openshift_etcd_backup
      volumes:
        - name: openshift-etcd-backup-vol
          persistentVolumeClaim:
            claimName: openshift-etcd-backup-pvc      
      serviceAccountName: "openshift-etcd-backup"
      serviceAccount: "openshift-etcd-backup"
      resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"
# Create PVC
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: openshift-etcd-backup-pvc
  labels:
    appname: openshift-etcd-backup
spec:
  accessModes: [ "ReadWriteMany" ]
  storageClassName: "ocs-storagecluster-cephfs"
  resources:
    requests:
      storage: 100Gi

